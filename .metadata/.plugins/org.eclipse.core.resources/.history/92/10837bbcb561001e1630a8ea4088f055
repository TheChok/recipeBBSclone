package com.make.board.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.make.board.dto.BoardDTO;
import com.make.board.dto.PageDTO;
import com.make.board.repository.BoardRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class BoardServiceImpl implements BoardService {
	private final BoardRepository boardRepository;
	int pageLimit  = 10;
	int blockLimit = 5;
	
	// 게시글 작성 처리
	@Override
	public int save(BoardDTO boardDTO) {
		return boardRepository.save(boardDTO);
	}
	
	// 목록 조회
	@Override
	public List<BoardDTO> findAll() {
		return boardRepository.findAll();
	}
	
	// 조회수 증가
	@Override
	public void updateHits(Long id) {
		boardRepository.updateHits(id);
	}
	
	// 상세 페이지 조회
	@Override
	public BoardDTO findById(Long id) {
		return boardRepository.findById(id);
	}
	
	// 게시글 삭제
	@Override
	public void delete(Long id) {
		boardRepository.delete(id);
	}
	
	// 게시글 수정
	@Override
	public void update(BoardDTO boardDTO) {
		boardRepository.update(boardDTO);
	}
	
	// 페이지 게시물 조회 
	@Override
	public List<BoardDTO> pageList(int page) {
		int pageStart = ((page-1) * pageLimit);
		
		Map<String, Integer> params = new HashMap<>();
		params.put("start", pageStart);
		params.put("limit", pageLimit);
		
		List<BoardDTO> list = boardRepository.pageList(params);
		
		return list;
	}
	
	// 페이징 처리
	@Override
	public PageDTO pageParam(int page) {
		// 전체 글 갯수 조회
        int boardCount = boardRepository.boardCount();
        // 전체 페이지 갯수 계산(10/3=3.33333 => 4)
        int maxPage = (int) (Math.ceil((double) boardCount / pageLimit));
        // 시작 페이지 값 계산(1, 4, 7, 10, ~~~~)
        int startPage = (((int)(Math.ceil((double) page / blockLimit))) - 1) * blockLimit + 1;
        // 끝 페이지 값 계산(3, 6, 9, 12, ~~~~)
        int endPage = startPage + blockLimit - 1;
        if (endPage > maxPage) {
            endPage = maxPage;
        }
        PageDTO pageDTO = new PageDTO();
        pageDTO.setPage(page);
        pageDTO.setMaxPage(maxPage);
        pageDTO.setStart(startPage);
        pageDTO.setEnd(endPage);
        return pageDTO;
	}
	
	
}
